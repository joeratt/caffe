package week3

object ClassHierarchies {
	//new IntSet
	val t1 = new NonEmpty(3,new Empty, new Empty)
  val t2 = t1 incl 4                              //> t1  : week3.NonEmpty = week3.NonEmpty@7c1d0898
}

abstract class IntSet {
  def incl(x: Int): IntSet
  def contains(x: Int): Boolean
}

class Empty extends IntSet {
	def contains(x: Int): Boolean = false
	def incl(x: Int): IntSet = new NonEmpty(x,new Empty, new Empty)
}

class NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet{
		def contains(x: Int): Boolean =
			if (x < elem) left contains x
			else if (x > elem) right contains x
			else false
		
		def incl(x: Int): IntSet =
			if(x < elem) new NonEmpty(elem, left incl x, right)
			else if (x > elem) new NonEmpty(elem, left, right incl x)
			else this
}