package week4

object PatternMatching {

  def eval(e: Expr): Int = e match {
    case Number(n) => n
    case Sum(e1, e2) => eval(e1) + eval(e2)
  }
  
  def show(e: Expr): String = e match {
  	case Number(n) => n.toString
  	case Sum(e1,e2) => show(e1) + " + " + show(e2)
  	case Var(x) => x
  	case Prod(e1,e2) => {
  	1 match { case Sum: "(" + show(e1) + ")} + " * " + show(e2)
  	}
  }
  
  eval(Number(1))
  eval(Sum(Number(1),Number(2)))
  
  show(Number(1))
  show(Sum(Number(1),Number(2)))
  
  show(Sum(Number(33),Sum(Number(55),Number(-33))))
  
  show(Sum(Prod(Number(2),Var("x")),Var("y")))
  
  show(Prod(Sum(Number(2),Var("x")),Var("y")))
}

trait Expr {
	def eval(e: Expr): Int = e match {
    case Number(n) => n
    case Sum(e1, e2) => eval(e1) + eval(e2)
  }
}
case class Number(n: Int) extends Expr
case class Sum(e1: Expr, e2: Expr) extends Expr
case class Var(name: String) extends Expr
case class Prod(e1: Expr, e2: Expr) extends Expr