package week4

object PatternMatching {

  def eval(e: Expr): Int = e match {
    case Number(n) => n
    case Sum(e1, e2) => eval(e1) + eval(e2)
  }                                               //> eval: (e: week4.Expr)Int
  
  def show(e: Expr): String = e match {
  	case Number(n) => n.toString
  	case Sum(e1,e2) => show(e1) + " + " + show(e2)
  }                                               //> show: (e: week4.Expr)String
  
  eval(Number(1))                                 //> res0: Int = 1
  eval(Sum(Number(1),Number(2)))                  //> res1: Int = 3
  
  show(Number(1))                                 //> res2: String = 1
  show(Sum(Number(1),Number(2)))                  //> res3: String = 1 + 2
  
  show(Sum(Number(33),Sum(Number(55),Number(-33))
}

trait Expr {
	def eval(e: Expr): Int = e match {
    case Number(n) => n
    case Sum(e1, e2) => eval(e1) + eval(e2)
  }
}
case class Number(n: Int) extends Expr
case class Sum(e1: Expr, e2: Expr) extends Expr