package week2

object EvaluationsAndOperators {
    val x2 = new Rational3(1, 3)

  x2.numer
  x2.denom

  val y2 = new Rational3(5, 7)

  x2.add(y2)

  val z2 = new Rational3(3, 2)

  x2.sub(y2).sub(z2)

  y2.add(y2)

  x2 < y2

  x2 max y2

  new Rational3(2)
}
  // infix operators
  
  class Rational3(x: Int, y: Int) {
  require(y != 0, "denom must be non-zero")

  def this(x: Int) = this(x, 1)

  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
  def numer = x
  def denom = y

  def + (that: Rational3): Rational3 =
    new Rational3(
      numer * that.denom + that.numer * denom, denom * that.denom)

  def - (that: Rational3): Rational3 = this + that.neg

  def neg: Rational3 = new Rational3(-numer, denom)

  def <(that: Rational3): Boolean = this.numer * that.denom < that.numer * this.denom

  def max(that: Rational3) = if (this < that) that else this

  override def toString =
    {
      val g = gcd(x, y)
      numer / g + "/" + denom / g
    }
}