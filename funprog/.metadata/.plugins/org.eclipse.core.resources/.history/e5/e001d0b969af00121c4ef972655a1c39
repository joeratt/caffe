package week4

trait List1[+T] {
	def isEmpty: Boolean
	def head: T
	def tail: List1[T]
}

class Cons2[T](val head: T, val tail: List1[T]) extends List1[T] {
  def isEmpty = false
}

object Nil2 extends List1[Nothing] {
  def isEmpty: Boolean = true
  def head:Nothing = throw new NoSuchElementException("Nil.head")
  def tail:Nothing = throw new NoSuchElementException("Nil.tail")
}

object test {
	val x: List1[String] = Nil2
}