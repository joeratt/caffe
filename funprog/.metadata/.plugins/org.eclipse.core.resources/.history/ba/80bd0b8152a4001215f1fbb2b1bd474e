package week3

import week3._

object Polymorphism {
  def singleton[T](elem: T) = new Cons[T](elem, new Nil[T])
                                                  //> singleton: [T](elem: T)week3.Cons[T]

  singleton[Int](1)                               //> res0: week3.Cons[Int] = week3.Cons@2a0aa21e
  singleton[Boolean](true)                        //> res1: week3.Cons[Boolean] = week3.Cons@20197522

  singleton(1)                                    //> res2: week3.Cons[Int] = week3.Cons@67591ba4
  singleton(true)                                 //> res3: week3.Cons[Boolean] = week3.Cons@b25e0fe

  def nth[T](n: Int, list: List[T]): T = {
      if (n == 0) list.head
      else if (list.isEmpty)
        throw new IndexOutOfBoundsException
      else nth(n-1, list.tail)
  }                                               //> nth: [T](n: Int, list: week3.List[T])T
  
  val list = new Cons(1,new Cons(2, new Cons(3, new Nil)))
                                                  //> list  : week3.Cons[Int] = week3.Cons@63d64969
}