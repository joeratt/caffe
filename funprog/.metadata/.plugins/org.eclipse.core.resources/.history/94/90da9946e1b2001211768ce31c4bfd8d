package week5

object HigherOrderListFunctions {
  val nums = List(2,-4,5,7,1)                     //> nums  : List[Int] = List(2, -4, 5, 7, 1)
    val fruits = List("apple", "pineapple", "orange", "banana")
                                                  //> fruits  : List[String] = List(apple, pineapple, orange, banana)
    val testPack = List("a","a","a","b","c","c","a")
                                                  //> testPack  : List[String] = List(a, a, a, b, c, c, a)
    
    testPack partition (x=> x==x)                 //> res0: (List[String], List[String]) = (List(a, a, a, b, c, c, a),List())
    
    nums filter (x => x > 0)                      //> res1: List[Int] = List(2, 5, 7, 1)
    nums filterNot (x => x > 0)                   //> res2: List[Int] = List(-4)
    nums partition (x => x > 0)                   //> res3: (List[Int], List[Int]) = (List(2, 5, 7, 1),List(-4))
    
    nums takeWhile (x => x > 0)                   //> res4: List[Int] = List(2)
    nums dropWhile (x => x > 0)                   //> res5: List[Int] = List(-4, 5, 7, 1)
    nums span (x => x > 0)                        //> res6: (List[Int], List[Int]) = (List(2),List(-4, 5, 7, 1))
    
    def pack[T](xs: List[T]): List[List[T]] = xs match {
    	case Nil => Nil
    	case x::xsl => Nil
    }                                             //> pack: [T](xs: List[T])List[List[T]]
}